{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","liked","allPosts","className","SearchPanel","props","state","term","onUpdateSearch","bind","e","target","value","this","setState","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","map","clazz","filter","key","onClick","onFilterSelect","PostListItem","onDelete","onToggleImportant","onToggleLiked","important","classNames","like","posts","elements","item","id","itemProps","ListGroup","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","required","App","data","deleteItem","addItem","maxId","index","findIndex","elem","slice","body","newItem","old","items","length","indexOf","visiblePosts","filterPost","searchPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d1303ef.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\nexport default AppHeader;","import React from 'react';\r\nimport './app-header.css';\r\n\r\n// разметка шапки, вставка данных\r\nconst AppHeader = ({liked, allPosts}) => {\r\n    return (\r\n        <div className='app-header d-flex'>\r\n            <h1>Zaiko Ann</h1>\r\n            <h2>{allPosts} записей, из них понравилось {liked}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader","import SearchPanel from './search-panel';\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\nimport './search-panel';\r\n\r\n// объект будет содержать внутреннее состояние (что ввел пользователь), нужно переделать в класс\r\nexport default class SearchPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        };\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n    }\r\n    onUpdateSearch(e) {\r\n        const term = e.target.value;\r\n        this.setState({term: term});\r\n        // необходимо обновить state как здесь, так и в модуле app\r\n        this.props.onUpdateSearch(term);\r\n    }\r\n    render() {\r\n        return (\r\n            <input\r\n                className='form-control search-input'\r\n                type='text'\r\n                placeholder='Поиск по записям'\r\n                onChange={this.onUpdateSearch}\r\n            />\r\n        )\r\n    }\r\n}","import PostStatusFilter from './post-status-filter';\r\nexport default PostStatusFilter;","import React, {Component} from 'react';\r\nimport './post-status-filter.css';\r\n\r\n// фильтр постов\r\nexport default class PostStatusFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttons = [\r\n            {name: 'all', label: 'Все'},\r\n            {name: 'like', label: 'Понравилось'}\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const active = this.props.filter === name;\r\n            // динамически сформировали доп.класс для кнопки\r\n            const clazz = active ? 'btn-info' : 'btn-outline-secondary';\r\n                return (\r\n                    <button \r\n                    key={name} \r\n                    type='button' \r\n                    // назначение класса активности\r\n                    className={`btn ${clazz}`}\r\n                    // назначение свойства определенной кнопке\r\n                    // необходимо обновить state в модуле app\r\n                    onClick={() => this.props.onFilterSelect(name)}>{label}</button>\r\n                )\r\n        });\r\n        return (\r\n            <div className='btn-group'>\r\n                {buttons}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import PostListItem from './post-list-item';\r\nexport default PostListItem;","import React, {Component} from 'react';\r\nimport './post-list-item.css';\r\n\r\n// отрисовка одного поста\r\nexport default class PostListItem extends Component {\r\n\r\n    render () {\r\n        // достаем из props все, что нам нужно\r\n        const {label, onDelete, onToggleImportant, onToggleLiked, important, like} = this.props; \r\n        let classNames = \"app-list-item d-flex justify-content-between\";\r\n\r\n        // если сработал обработчик события, в разметку добавляются классы лайка и звездочки\r\n        if (like) {\r\n            classNames += ' like';\r\n        }\r\n        if (important) {\r\n            classNames += ' important';\r\n        }\r\n\r\n        return (\r\n            <div className={classNames}>\r\n                <span \r\n                    className=\"app-list-item-label\"\r\n                    onClick={onToggleLiked}>\r\n                    {label}\r\n                </span>\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn-star btn-sm\"\r\n                    onClick={onToggleImportant}>\r\n                        <i className=\"fa fa-star\"></i>\r\n                    </button>\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn-trash btn-sm\"\r\n                    onClick={onDelete}>\r\n                        <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                    <i className=\"fa fa-heart\"></i>\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n    }","import PostListItem from './post-list';\r\nexport default PostListItem;","import React from 'react';\r\nimport PostListItem from '../post-list-item';\r\nimport {ListGroup} from 'reactstrap';\r\nimport './post-list.css';\r\n\r\n// отрисовка блока постов\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleLiked}) => {\r\n    \r\n    // itemProps - данные, которые призодят с сервера\r\n    const elements = posts.map((item) => {\r\n        const {id, ...itemProps} = item; \r\n        return (\r\n            <li key={id} className='list-group-item'>\r\n                <PostListItem \r\n                    {...itemProps}\r\n                    onDelete={() => onDelete(id)}\r\n                    onToggleImportant={() => onToggleImportant(id)}\r\n                    onToggleLiked={() => onToggleLiked(id)}\r\n                    /> \r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ListGroup className='app-list'>\r\n            {elements}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nexport default PostList;","import PostAddForm from './post-add-form';\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\nimport './post-add-form.css';\r\n\r\n// форма добавления новых постов\r\nexport default class PostAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: ''\r\n        };\r\n        // привязываем контекст для обработчиков событий\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onValueChange(e) {\r\n        this.setState({\r\n            text: e.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onAdd(this.state.text);\r\n        this.setState({\r\n            text: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form \r\n                className='bottom-panel d-flex'\r\n                onSubmit={this.onSubmit}>\r\n                <input\r\n                    type='text'\r\n                    placeholder='О чем вы сейчас думаете?'\r\n                    className='form-control new-post-label'\r\n                    onChange={this.onValueChange}\r\n                    value={this.state.text}\r\n                    required\r\n                />\r\n                <button\r\n                    type='submit'\r\n                    className='btn btn-control-secondary'>\r\n                Добавить</button>\r\n            </form>\r\n        )\r\n    }\r\n}","import App from './app';\r\nexport default App;","import React, {Component} from 'react';\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostList from '../post-list';\r\nimport PostAddForm from '../post-add-form';\r\n\r\nimport './app.css';\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // эмуляция получения данных с сревера\r\n            data: [\r\n                {label: 'Going to learn React', important: false, like: false, id: 1},\r\n                {label: 'That is so good', important: false, like: false, id: 2},\r\n                {label: 'I need a break...', important: false, like: false, id: 3}        \r\n            ],\r\n            term: '',\r\n            filter: 'all'\r\n        };\r\n        // чтобы функции работали, нужно привязать обработчик события\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n\r\n        this.maxId = 4;\r\n    }\r\n\r\n    // удаление поста\r\n    deleteItem(id) {\r\n        //передаем новое состояние массива в state, где лежит исходный массив\r\n        this.setState(({data}) => {\r\n            // elem - каждый элемент массива. сравниваем id массива с тем, что был нажат\r\n            const index = data.findIndex(elem => elem.id === id);\r\n\r\n            // разбиваем массив на до удаленного элемента и после\r\n            // соединяем обе части\r\n            const newArr = [...data.slice(0, index), ...data.slice(index + 1)];\r\n\r\n            // Важно: мы не изменили текущее состояние элемента, а заменили его на новый\r\n            return{\r\n                data: newArr\r\n            };\r\n        });\r\n    }\r\n\r\n    // добавление нового поста\r\n    addItem(body) {\r\n        // тело нового поста\r\n        const newItem = {\r\n            label: body,\r\n            important: false,\r\n            // вручную формируем уникальный id у поста\r\n            id: this.maxId++\r\n        };\r\n        this.setState(({data}) => {\r\n            // через spread оператор добавляем все аргументы, что есть в текущем массиве и добавляем новый айтем\r\n            const newArr = [...data, newItem];\r\n            return {\r\n                data:newArr\r\n            };\r\n        });\r\n    }\r\n\r\n    // тоггл избранного\r\n    onToggleImportant(id) {\r\n        this.setState(({data}) => {\r\n            // сравниваем id важного поста с id элементов массива, получаем совпадающий индекс\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            const old = data[index];\r\n            const newItem = {...old, important: !old.important};\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n\r\n            return {\r\n                data: newArr\r\n            };\r\n        });\r\n    }\r\n\r\n    // тоггл лайка\r\n    onToggleLiked(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            const old = data[index];\r\n            const newItem = {...old, like: !old.like};\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n\r\n            return {\r\n                data: newArr\r\n            };\r\n        });\r\n    }\r\n\r\n    // поиск по постам\r\n    searchPost(items, term) {\r\n        // если запрос пустой - отрисовка текущих карточек\r\n        if (term.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        // если нет - проверка введенных данных, выгрузка в новый массив\r\n        return items.filter((item) => {\r\n            return item.label.indexOf(term) > -1;\r\n        });\r\n    }\r\n\r\n    // фильтр лайкнутых постов\r\n    filterPost(items, filter) {\r\n        if (filter === 'like') {\r\n            return items.filter(item => item.like);\r\n        } else {\r\n            return items;\r\n        }\r\n    }\r\n    // просто обновляет state так же как в модуле search-panel\r\n    onUpdateSearch(term) {\r\n        this.setState({term});\r\n    }\r\n\r\n    onFilterSelect(filter) {\r\n        this.setState({filter});\r\n    }\r\n    \r\n    render() {\r\n        const {data, term, filter} = this.state,\r\n              liked = data.filter(item => item.like).length,\r\n              allPosts = data.length;\r\n        // формируем видимые посты как результат запроса, либо переключения кнопок меню\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter);\r\n\r\n        return (\r\n            <div className='app'>\r\n                <AppHeader\r\n                    liked={liked}\r\n                    allPosts={allPosts}/>\r\n                <div className='search-panel d-flex'>\r\n                    <SearchPanel\r\n                        onUpdateSearch={this.onUpdateSearch}/>\r\n                    <PostStatusFilter\r\n                        filter={filter}\r\n                        onFilterSelect={this.onFilterSelect}/>\r\n                </div>\r\n                <PostList \r\n                    posts={visiblePosts}\r\n                    onDelete={this.deleteItem}\r\n                    onToggleImportant={this.onToggleImportant}\r\n                    onToggleLiked={this.onToggleLiked}/> \r\n                <PostAddForm\r\n                    onAdd={this.addItem}/>\r\n            </div>\r\n    \r\n            )\r\n    }\r\n\r\n}","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './components/app/';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}